---
import ProductLayouts from "@/functional-components/product/ProductLayouts";
import ProductFilters from "@/functional-components/ProductFilters";
import ProductLayoutViews from "@/functional-components/ProductLayoutViews";
import Base from "@/layouts/Base.astro";
import CallToAction from "@/partials/CallToAction.astro";


// Datos simulados
const defaultSort = { sortKey: "TITLE", reverse: false };
const sorting = [
  { slug: "title", sortKey: "TITLE", reverse: false },
  { slug: "price", sortKey: "PRICE", reverse: true },
];

const mockProducts = [
  {
    title: "Product 1",
    vendor: "Vendor A",
    tags: ["tag1", "tag2"],
    collections: { nodes: [{ title: "Category A" }] },
  },
  {
    title: "Product 2",
    vendor: "Vendor B",
    tags: ["tag3"],
    collections: { nodes: [{ title: "Category B" }] },
  },
];

const mockCategories = [
  { title: "Category A" },
  { title: "Category B" },
];

const mockVendors = [
  { vendor: "Vendor A" },
  { vendor: "Vendor B" },
];

const mockMaxPrice = 100;

// Obtener parametros
const searchParams = Astro.url.searchParams;
const searchParamsObject = Object.fromEntries(searchParams.entries());

const sort = searchParamsObject.sort || "";
const searchValue = searchParamsObject.q || "";
const minPrice = searchParamsObject.minPrice || "";
const maxPrice = searchParamsObject.maxPrice || "";
const brand = searchParamsObject.b || "";
const category = searchParamsObject.c || "all";
const tag = searchParamsObject.t || "";
const cursor = searchParamsObject.cursor || null;

const { sortKey, reverse } =
  sorting.find((item) => item.slug === sort) || defaultSort;

// Datos procesados
const vendorsWithCounts = mockVendors.map((vendor) => {
  const productCount = mockProducts.filter(
    (product) => product.vendor === vendor.vendor
  ).length;
  return { vendor: vendor.vendor, productCount };
});

const categoriesWithCounts = mockCategories.map((category) => {
  const productCount = mockProducts.filter((product) =>
    product.collections.nodes.some(
      (collectionNode) => collectionNode.title === category.title
    )
  ).length;
  return { category: category.title, productCount };
});

const tags = [...new Set(mockProducts.flatMap((product) => product.tags))];
const initialProducts = mockProducts;
const initialPageInfo = { hasNextPage: false, hasPreviousPage: false };
---

<Base title="Products">
  <ProductLayouts
    categories={mockCategories}
    vendors={mockVendors}
    tags={tags}
    maxPriceData={mockMaxPrice}
    vendorsWithCounts={vendorsWithCounts}
    categoriesWithCounts={categoriesWithCounts}
    client:only="react"
  />

  <div class="container">
    <div class="row">
      <div class="col-3 hidden lg:block -mt-14">
        <ProductFilters
          categories={mockCategories}
          vendors={mockVendors}
          tags={tags}
          maxPriceData={mockMaxPrice}
          vendorsWithCounts={vendorsWithCounts}
          categoriesWithCounts={categoriesWithCounts}
          client:only="react"
        />
      </div>

      <ProductLayoutViews
        initialProducts={initialProducts}
        initialPageInfo={initialPageInfo}
        sortKey={sortKey}
        reverse={reverse}
        searchValue={searchValue}
        client:only="react"
      />
      <CallToAction />
    </div>
  </div>
</Base>
